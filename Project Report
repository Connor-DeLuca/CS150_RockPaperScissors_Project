1. Introduce the project problem you chose, including a few background details (ex: a sentence or two regarding the history of the Rubik's cube would be appropriate for topic 3).

The problem we choose for our project was the Rock-Paper-Scissors game againest a computer opponent. We made sure that each scenario within the game results in the correct outcome. For example when the player enters "rock" it will beat the computer's "scissors".

2. Provide basic documentation as to how your code is to be used by somebody unfamiliar with your implementation (ex: is it a user prompt, a class with methods that a user must invoke, etc.)

We provided a user prompt for the player to play the game. When asked to enter either, "rock", "paper", or "scissors", the user can input one of these variables to play the game. If the user enters nothing, they will exit the game. If the user does play the game, no matter the result they will be offered to play again.

3. Provide technical details including the following:
i. What functions/methods you created to solve the problem, if any.

We used three functions to help create our solution. The win() function occurs when you have a winning scenario vs. the computer and outputs that you won. The tie() function occurs when you have a tying scenario vs. the computer and outputs that you tied. The loss() function occurs when you have a lossing scenario vs. the computer and outputs that you lost. All of these functions add 1 point to their respective scores record. The last function is the score() function which outputs the record you have after the game.

ii. What data types and collections you used for variables/storage



iii. What standard and/or third-party libraries, classes, and functions you have employed.

A standard library we used was the "random" library which allows use to use a random.randint method. ...

4. Explain any aspects to your chosen problem that you initially set out to tackle that you were unable to do so, or anything that isn't quite working correctly, and what you believe the issue to be.  (If nothing applies here, you should state as much.)

Nothing applies here.

5. Explain in a paragraph or so how your code could be built upon to solve a larger scale problem or include additional features that were not present.  Note: I will be extremely flexible about your choice here, but you must put something. 


